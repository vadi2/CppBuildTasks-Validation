# Copyright (c) 2019-2020 Luca Cappa
# Released under the term specified in file LICENSE.txt
# SPDX short identifier: MIT
name: hosted-advanced-setup-vcpkg
on: [push]

jobs:
  job:
    name: ${{ matrix.os }}-hosted-advanced
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: windows-latest
            triplet: x64-windows
            vcpkgCommitId: '2019.11'
            vcpkgPackages: 'sqlite3'
            configuration: 'x64.*'
          - os: ubuntu-latest
            triplet: x64-linux
            vcpkgCommitId: '2019.11'
            vcpkgPackages: 'sqlite3'
            configuration: '.*Linux.*'
          - os: macos-latest
            triplet: x64-osx
            vcpkgCommitId: '2019.11'
            vcpkgPackages: 'sqlite3'
            configuration: '.*Linux.*'

    steps:
      - uses: actions/checkout@v1
        with:
          submodules: true

      - name: dir
        run: find ${{ runner.workspace }}
        if: "!contains( matrix.os, 'windows')"
      - name: dir
        run: gci -recurse ${{ runner.workspace }}
        if: contains( matrix.os, 'windows')
      - name: Setup vcpkg (do not install any package)
        uses: lukka/run-vcpkg@add_shell_support
        id: runvcpkg
        with:
          setupOnly: true
          vcpkgDirectory: '${{ runner.workspace }}/b/vcpkg'
          vcpkgGitCommitId: '${{ matrix.vcpkgCommitId}}'
      - name: Set vcpkg's response file path used as part of cache's key.
        uses: lukka/set-shell-env@v0
        with:
          VCPKGRESPONSEFILE: ${{ github.workspace }}/cmakelists.txt/vcpkg_${{ matrix.triplet }}.txt
          VCPKG_DEFAULT_TRIPLET: ${{ matrix.triplet }}
      - run: |
          $VCPKG_ROOT/vcpkg install @$VCPKGRESPONSEFILE --clean-after-build
          rm -rfv $VCPKG_ROOT/buildtrees
          rm -rfv $VCPKG_ROOT/packages
          rm -rfv $VCPKG_ROOT/downloads
        shell: bash
        name: Run vcpkg in a inline script in this workflow.
      - name: Prints output of run-vcpkg's task
        run: echo "root='${{ steps.runvcpkg.outputs.RUNVCPKG_VCPKG_ROOT_OUT }}', triplet='${{ steps.runvcpkg.outputs.RUNVCPKG_VCPKG_TRIPLET_OUT }}' "
      - name: Run CMake+EnvVar
        if: "!contains( matrix.os, 'windows')"
        uses: lukka/run-cmake@add_shell_support
        with:
          cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
          cmakeListsTxtPath: '${{ github.workspace }}/cmakelists.txt/CMakeLists.txt'
          useVcpkgToolchainFile: true
          buildDirectory: '${{ runner.workspace }}/b/envvar_ninja'
          cmakeAppendedArgs: '-GNinja -DVCPKG_TARGET_TRIPLET=${{ env.VCPKG_DEFAULT_TRIPLET }} -DCMAKE_TOOLCHAIN_FILE=${ANDROID_SDK_ROOT}/ndk-bundle/build/cmake/android.toolchain.cmake'
      - name: Run CMake+Ninja
        uses: lukka/run-cmake@add_shell_support
        id: runcmake
        with:
          cmakeListsTxtPath: '${{ github.workspace }}/cmakelists.txt/CMakeLists.txt'
          useVcpkgToolchainFile: true
          buildWithCMakeArgs: '-- -v'
          buildDirectory: '${{ runner.workspace }}/b/ninja/'
          cmakeAppendedArgs: '-G Ninja '
      - name: Run CMake+VS
        uses: lukka/run-cmake@add_shell_support
        if: contains( matrix.os, 'windows')
        with:
          cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
          cmakeListsTxtPath: '${{ github.workspace }}/cmakelists.txt/CMakeLists.txt'
          useVcpkgToolchainFile: true
          buildDirectory: '${{ runner.workspace }}/b/vs16'
          cmakeAppendedArgs: '-G "Visual Studio 16 2019" -A x64'
      - name: 'Run CMake with CMakeSettings.json'
        uses: lukka/run-cmake@add_shell_support
        with:
          cmakeListsOrSettingsJson: CMakeSettingsJson
          cmakeSettingsJsonPath: '${{ github.workspace }}/cmakesettings.json/CMakeSettings.json'
          useVcpkgToolchainFile: true
          configurationRegexFilter: ${{ matrix.configuration }}

